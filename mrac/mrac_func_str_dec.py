from idc import *
from idaapi import *
from idautils import *
from ida_bytes import *
import string

#use it on a function and change the "text_str" variable in main() func
def input_gather(start,text_str):
    fa = []
    fb = []
    fc = []
    xorc = 0
    addc = 0
    for i in range(start,start+1000):
        if is_code(get_full_flags(i)):
            if print_insn_mnem(i) == "xor":
                xorc = xorc + 1
                fa.append(get_operand_value(i,1))
            if print_insn_mnem(i) == "add":
                addc = addc + 1
                fc.append(get_operand_value(i,1))
            if "esp" in print_operand(i,0):
                fb.append(get_operand_value(i,1))
            if get_operand_value(i,0) == 4201312:
                end = i
                break
    if xorc > 7:
        lp = ''.join(chr(i) for i in fa)
        set_cmt(end,lp,1)
        print(lp)
    elif addc > 7:
        lp = ''.join(chr(i) for i in fc)
        set_cmt(end,lp,1)
        print(lp)
    else:
        try:
            dp = sub_xor(fb,text_str)
            set_cmt(end,dp,1)
            print(dp)
        except:
            print("ValueError")
            pass
    print(fa)
    print(fb)
    print(fc)
    return end+5

def sub_xor(fb,text_str):
    dp = ""
    for i in fb:
        kp = i ^ fb[0]
        try:
            if chr(kp) in string.printable:
                dp = dp + chr(kp)
        except:
            pass
    if text_str in dp:
        return dp
    else:
        dp = ""
    for j in range(1,20):
        for i in fb:
            kp = i - j
            try:
                if chr(kp) in string.printable:
                    dp = dp + chr(kp)
            except:
                pass
        print(dp)
        if text_str in dp:
            return dp
        else:
            dp = ""
    return "string not found"
    
def main():
    t0, t1, view = idaapi.twinpos_t(), idaapi.twinpos_t(), idaapi.get_current_viewer()
    if idaapi.read_selection(view, t0, t1):
        start, end = t0.place(view).toea(), t1.place(view).toea()
        size = end - start
    elif idc.get_item_size(idc.get_screen_ea()) > 1:
        start = idc.get_screen_ea()
        size = idc.get_item_size(start)
        end = start + size
    else:
        print('fuckubitch')
    ed = 1
    lol = start
    text_str = "kill"
    while lol < get_func_attr(start,FUNCATTR_END):
        cp = input_gather(lol,text_str)
        lol = cp
    
if __name__ == '__main__':
    main()
    
